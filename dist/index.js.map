{"version":3,"sources":["../src/index.ts","../src/commands/createViteApp.ts","../src/utils/executeCommand.ts","../src/commands/createVitePlasmicApp.ts","../src/utils/promptForPlasmicId.ts","../src/commands/runCodemods.ts","../src/commands/plasmicSync.ts","../src/commands/plasmicAuth.ts","../src/commands/plasmicInit.ts","../src/commands/serveCreateReactAppBuild.ts","../src/commands/plasmicFixImports.ts","../src/utils/promptForProjectName.ts","../src/commands/generateSdk.ts","../src/commands/stashAndPull.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport chalk from 'chalk';\nimport dotenv from 'dotenv';\nimport { createViteApp } from './commands/createViteApp';\nimport { createVitePlasmicApp } from './commands/createVitePlasmicApp';\nimport { plasmicSync } from './commands/plasmicSync';\nimport { plasmicAuth } from './commands/plasmicAuth';\nimport { plasmicInit } from './commands/plasmicInit';\nimport { serveCreateReactAppBuild } from './commands/serveCreateReactAppBuild';\nimport { plasmicFixImports } from './commands/plasmicFixImports';\nimport { promptForProjectName } from './utils/promptForProjectName';\nimport { runReplaceDefaults } from './commands/runCodemods';\nimport { generateSDK } from './commands/generateSdk';\nimport { stashAndPull } from './commands/stashAndPull';\n\ndotenv.config();\n\nconst args = process.argv.slice(2);\nconst templateCwd = args[0];\nconst command = args[1];\nlet projectNameArg = args[2];\nconst dirArg = args.find(arg => arg.startsWith('dir='));\nconst projectDir = dirArg ? dirArg.split('=')[1] : process.env.PROJECT_DIR || '/home/niu/stash';\nconsole.log(command);\n\n// Check if vanilla=true is specified\nlet isVanilla = false;\nif (projectNameArg && projectNameArg.includes('vanilla=true')) {\n  isVanilla = true;\n  projectNameArg = projectNameArg.replace('vanilla=true', '').trim();\n}\n\nswitch (command) {\n  case 'stash-and-pull':\n    case 'stash':\n    await stashAndPull(templateCwd)\n    break;\n  case 'create-vite':\n    if (!projectNameArg) {\n      const projectName = await promptForProjectName();\n      createViteApp(projectName, projectDir, { vanilla: isVanilla });\n    } else {\n      createViteApp(projectNameArg, projectDir, { vanilla: isVanilla });\n    }\n    break;\n  case 'create-vite-plasmic-app':\n  case 'vpa':\n    if (!projectNameArg) {\n      const projectName = await promptForProjectName();\n      createVitePlasmicApp(projectName, projectDir);\n    } else {\n      createVitePlasmicApp(projectNameArg, projectDir);\n    }\n    break;\n  case 'test':\n    console.log(templateCwd);\n    break;\n  case 'sync':\n    await plasmicSync(templateCwd);\n    break;\n  case 'auth':\n    await plasmicAuth();\n    break;\n  case 'fix-imports':\n    await plasmicFixImports(templateCwd);\n    break;\n  case 'init':\n    await plasmicInit(templateCwd);\n    break;\n  case 'eject':\n    runReplaceDefaults(templateCwd);\n    break;\n  case 'serve-cra-build':\n    await serveCreateReactAppBuild(templateCwd);\n    break;\n  case 'generate-sdk':\n    await generateSDK(templateCwd)\n    break;\n  default:\n    console.log(chalk.red('Unknown command'));\n    console.log('Usage:');\n    console.log('  niu create-vite [projectName] [dir=/path/to/dir] [vanilla=true]');\n    console.log('  niu create-vite-plasmic-app [projectName] [dir=/path/to/dir]');\n    console.log('  niu create-vite-vanilla [projectName] [dir=/path/to/dir]');\n    process.exit(1);\n}\n\n\n","import chalk from 'chalk';\nimport fs from 'fs';\nimport path from 'path';\nimport {executeCommand} from '../utils/executeCommand'\nimport 'dotenv/config'\n\nexport async function createViteApp(projectName: string, projectDir: string, options: { vanilla?: boolean } = {}) {\n  const pckm = process.env.PCKM || 'npm'\n\n  const template = options.vanilla ? 'vanilla-ts' : 'react-swc-ts';\n  const projectPath = path.join(projectDir, projectName);\n\n  console.log(chalk.green(`Creating Vite project ${projectName} with template ${template}...`));\n\n  try {\n    // Create the project directory if it doesn't exist\n    if (!fs.existsSync(projectPath)) {\n      fs.mkdirSync(projectPath, { recursive: true });\n    }\n\n    // Initialize a new Vite project with package name\n    await executeCommand('npm', ['init', 'vite@latest', '.', '--', '--template', template, '--name', projectName], projectPath);\n\n    console.log(chalk.green(`Vite project initialized successfully with ${template} template.`));\n\n    const npmrcContent = `registry=https://registry.npmjs.org/`\n    const npmrcPath = path.join(projectPath, '.npmrc');\n    fs.writeFileSync(npmrcPath, npmrcContent);\n    console.log(chalk.green('.npmrc file created.'));\n\n    // Install initial dependencies\n    const initialDependencies = options.vanilla ? [] : ['react', 'react-dom', 'react-router-dom'];\n    await executeCommand(pckm, ['install', ...initialDependencies], projectPath);\n\n    console.log(chalk.green('Dependencies installed successfully.'));\n\n      // Install dev dependencies for Prettier and ESLint integration\n      console.log(chalk.green('Installing dev dependencies'));\n      const devDependencies = ['prettier', 'eslint-config-prettier'];\n      await executeCommand(pckm, ['install', '--save-dev', ...devDependencies], projectPath);\n  \n      // Create .prettierrc file with contents {}\n      const prettierrcPath = path.join(projectPath, '.prettierrc');\n      fs.writeFileSync(prettierrcPath, '{}');\n      console.log(chalk.green('.prettierrc file created.'));\n  \n      // Create .prettierignore file and add src/components/plasmic to it\n      const prettierignorePath = path.join(projectPath, '.prettierignore');\n      const prettierignoreContent = 'src/generated';\n      fs.writeFileSync(prettierignorePath, prettierignoreContent);\n      console.log(chalk.green('.prettierignore file created.'));\n  \n      // Update ESLint configuration to extend Prettier\n      const eslintrcPath = path.join(projectPath, '.eslintrc.cjs');\n      const eslintrcContent = `module.exports = {\n    root: true,\n    env: { browser: true, es2020: true },\n    extends: [\n      \"eslint:recommended\",\n      \"plugin:@typescript-eslint/recommended\",\n      \"plugin:react-hooks/recommended\",\n      \"prettier\"\n    ],\n    ignorePatterns: [\"dist\", \".eslintrc.cjs\"],\n    parser: \"@typescript-eslint/parser\",\n    plugins: [\"react-refresh\"],\n    rules: {\n      \"react-refresh/only-export-components\": [\n        \"warn\",\n        { allowConstantExport: true },\n      ],\n    },\n  };`;\n      fs.writeFileSync(eslintrcPath, eslintrcContent);\n      console.log(chalk.green('.eslintrc.cjs updated to extend Prettier.'));\n\n\n    console.log(chalk.green(`Project ${projectName} created successfully.`));\n  } catch (error) {\n    console.error(chalk.red(`Error creating Vite project: ${(error as Error).message}`));\n    process.exit(1);\n  }\n}\n","import { execa } from 'execa';\n\nexport async function executeCommand(command: string, args: string[], cwd: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    const childProcess = execa(command, args, { cwd });\n\n    // Forward stdout and stderr to the parent process\n    childProcess.stdout?.pipe(process.stdout);\n    childProcess.stderr?.pipe(process.stderr);\n\n    childProcess.on('exit', (code, signal) => {\n      if (code === 0) {\n        resolve();\n      } else {\n        reject(new Error(`Command '${command} ${args.join(' ')}' exited with code ${code}`));\n      }\n    });\n  });\n}\n","#!/usr/bin/env node\n\nimport chalk from 'chalk';\nimport { executeCommand } from '../utils/executeCommand';\nimport { promptForProjectId } from '../utils/promptForPlasmicId';\nimport { runReplaceDefaults, setupComponentFoldersAndRoutes } from '../commands/runCodemods';\nimport fs from 'fs';\nimport path from 'path';\nimport 'dotenv/config'\n\nexport async function createVitePlasmicApp(projectName: string, projectDir: string) {\n  const projectPath = path.join(projectDir, projectName);\n\n  const pckm = process.env.PCKM || 'npm'\n\n\n  console.log(chalk.green(`Creating project ${projectName} at ${projectPath}...`));\n\n  // Create the project directory if it doesn't exist\n  if (!fs.existsSync(projectPath)) {\n    fs.mkdirSync(projectPath, { recursive: true });\n  } else {\n    console.error(chalk.red(`Project directory ${projectPath} already exists.`));\n    process.exit(1);\n  }\n\n  try {\n    const plasmicProjectId = await promptForProjectId();\n\n    const viteProjectName = projectName.toLowerCase();\n    console.log(chalk.green('Scaffolding project with vite dependencies'));\n\n    // Initialize a new Vite project in the project directory with react-swc-ts template\n    await executeCommand('npm', ['init', 'vite@latest', '.', '--', '--template', 'react-swc-ts', '--name', viteProjectName], projectPath);\n\n    console.log(chalk.green('Vite project with plasmic initialized successfully with react-swc-ts template.'));\n    const npmrcContent = `registry=https://registry.npmjs.org/`\n    const npmrcPath = path.join(projectPath, '.npmrc');\n    fs.writeFileSync(npmrcPath, npmrcContent);\n    console.log(chalk.green('.npmrc file created.'));\n    console.log(chalk.green('Installing dependencies'));\n\n    // Install additional dependencies including @plasmicapp/loader, @plasmicapp/cli, and react-router-dom\n    const dependencies = ['@plasmicapp/loader', 'react-router-dom', '@plasmicapp/react-web'];\n    await executeCommand(pckm , ['install'], projectPath);\n\n    console.log(chalk.green('Installing @plasmicapp dependencies'));\n    await executeCommand(pckm, ['install', ...dependencies, '--ignore-scripts'], projectPath);\n\n    console.log(chalk.green('Dependencies installed successfully.'));\n\n    // Install dev dependencies for Prettier and ESLint integration\n    console.log(chalk.green('Installing dev dependencies'));\n    const devDependencies = ['prettier', 'eslint-config-prettier'];\n    await executeCommand(pckm, ['install', '--save-dev', ...devDependencies], projectPath);\n\n    // Create .prettierrc file with contents {}\n    const prettierrcPath = path.join(projectPath, '.prettierrc');\n    fs.writeFileSync(prettierrcPath, '{}');\n    console.log(chalk.green('.prettierrc file created.'));\n\n    // Create .prettierignore file and add src/components/plasmic to it\n    const prettierignorePath = path.join(projectPath, '.prettierignore');\n    const prettierignoreContent = 'src/generated';\n    fs.writeFileSync(prettierignorePath, prettierignoreContent);\n    console.log(chalk.green('.prettierignore file created.'));\n\n    // Update ESLint configuration to extend Prettier\n    const eslintrcPath = path.join(projectPath, '.eslintrc.cjs');\n    const eslintrcContent = `module.exports = {\n  root: true,\n  env: { browser: true, es2020: true },\n  extends: [\n    \"eslint:recommended\",\n    \"plugin:@typescript-eslint/recommended\",\n    \"plugin:react-hooks/recommended\",\n    \"prettier\"\n  ],\n  ignorePatterns: [\"dist\", \".eslintrc.cjs\"],\n  parser: \"@typescript-eslint/parser\",\n  plugins: [\"react-refresh\"],\n  rules: {\n    \"react-refresh/only-export-components\": [\n      \"warn\",\n      { allowConstantExport: true },\n    ],\n  },\n};`;\n    fs.writeFileSync(eslintrcPath, eslintrcContent);\n    console.log(chalk.green('.eslintrc.cjs updated to extend Prettier.'));\n\n    // Update package.json scripts to include 'plasmic' script\n    const packageJsonPath = path.join(projectPath, 'package.json');\n    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));\n    packageJson.scripts['plasmic'] = 'plasmic sync';\n    fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));\n\n    console.log(chalk.green(`Project ${projectName} created successfully.`));\n\n    // Create .env file and add PLASMICID and PLASMICTOKEN placeholders\n    const envFilePath = path.join(projectPath, '.env');\n    const envContent = `PLASMICID=YOURID\\nPLASMICTOKEN=YOURTOKEN\\n`;\n    fs.writeFileSync(envFilePath, envContent);\n    console.log(chalk.green('.env file created with placeholders for PLASMICID and PLASMICTOKEN.'));\n\n    // Create .gitignore file if it doesn't exist and add .env and node_modules to it\n    const gitignoreFilePath = path.join(projectPath, '.gitignore');\n    let gitignoreContent = '';\n    if (fs.existsSync(gitignoreFilePath)) {\n      gitignoreContent = fs.readFileSync(gitignoreFilePath, 'utf8');\n    }\n    if (!gitignoreContent.includes('.env')) {\n      gitignoreContent += '\\n.env';\n    }\n    if (!gitignoreContent.includes('node_modules')) {\n      gitignoreContent += '\\nnode_modules';\n    }\n    fs.writeFileSync(gitignoreFilePath, gitignoreContent);\n    console.log(chalk.green('.gitignore updated to include .env and node_modules.'));\n\n    // Remove defaults\n    console.log(chalk.green('Removing Vite placeholder content'));\n    await runReplaceDefaults(projectPath);\n\n    // Sync with Plasmic\n    await executeCommand('plasmic', ['init', '--src-dir', 'src/components', '--plasmic-dir', '../generated', '--yes'], projectPath);\n    console.log(chalk.green(`Plasmic project ${projectName} initialised successfully.`));\n\n    await executeCommand('plasmic', ['sync', '-p', plasmicProjectId, '--yes'], projectPath);\n\n    console.log(chalk.green(`Plasmic project ${projectName} synced successfully.`));\n\n    console.log(chalk.green(`Updating imports, creating folder structure and formatting code`));\n\n    await setupComponentFoldersAndRoutes(projectPath);\n\n    await executeCommand('npx', ['prettier', '.', '--write'], projectPath)\n\n    console.log(chalk.green(`Setup complete`));\n\n  } catch (error) {\n    console.error(chalk.red(`Error: ${(error as Error).message}`));\n    process.exit(1);\n  }\n}\n","import readline from 'readline';\n\nexport async function promptForProjectId(): Promise<string> {\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n  });\n\n  return new Promise((resolve) => {\n    rl.question('Enter the Plasmic project ID: ', (projectId) => {\n      rl.close();\n      resolve(projectId);\n    });\n  });\n}\n","import { run } from 'jscodeshift/src/Runner';\nimport path from 'path';\nimport fs from 'fs-extra';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\ninterface Component {\n  name?: string;\n  path?: string;\n  url?: string;\n  componentType?: string;\n}\n\ninterface Project {\n  components: Component[];\n}\n\ninterface PlasmicJsonContents {\n  srcDir: string;\n  projects: Project[];\n}\n\nexport async function runReplaceDefaults(templateCwd: string) {\n  const filesToTransform = [\n    path.resolve(templateCwd, 'src/App.tsx'),\n    path.resolve(templateCwd, 'src/main.tsx')\n    // Add more files or directories as needed\n  ];\n\n  const jscodeshiftOptions = {\n    parser: 'tsx', // Specify the parser, e.g., 'tsx', 'babel', 'ts', etc.\n    dry: false, // Set to true for a dry run without making changes\n  };\n\n  const codemodPath = path.resolve(__dirname, '../codemods/replaceDefaults.ts');\n  await run(codemodPath, filesToTransform, jscodeshiftOptions);\n\n  try {\n    fs.unlinkSync(path.resolve(templateCwd, 'src/App.css'));\n    console.log('Deleted src/App.css');\n  } catch (error) {\n    console.error('Error deleting src/App.css:', error);\n  }\n\n  try {\n    fs.unlinkSync(path.resolve(templateCwd, 'src/index.css'));\n    console.log('Deleted src/index.css');\n  } catch (error) {\n    console.error('Error deleting src/index.css:', error);\n  }\n}\n\nexport async function setupComponentFoldersAndRoutes(templateCwd: string) {\n  const plasmicJsonPath = path.resolve(templateCwd, 'plasmic.json');\n  let plasmicData: PlasmicJsonContents;\n\n  try {\n    plasmicData = await fs.readJson(plasmicJsonPath);\n  } catch (error) {\n    console.error('Error reading plasmic.json:', error);\n    return;\n  }\n\n  const srcDir = plasmicData.srcDir;\n  const pagesComponents: Component[] = [];\n\n  for (const project of plasmicData.projects) {\n    for (const component of project.components) {\n      const srcDirConcat = path.resolve(templateCwd, srcDir);\n      const componentFile = path.resolve(srcDirConcat, `${component.name}.tsx`);\n      const componentDirPath = path.resolve(srcDirConcat, component.name as string);\n\n      if (!(await fs.pathExists(path.resolve(srcDirConcat, component.name as string)))) {\n        await fs.ensureDir(componentDirPath);\n        const newComponentFile = path.resolve(componentDirPath, `${component.name}.tsx`);\n        const indexFile = path.resolve(componentDirPath, 'index.ts');\n\n        if (await fs.pathExists(componentFile)) {\n          await fs.move(componentFile, newComponentFile);\n        }\n\n        await fs.writeFile(indexFile, `export { default } from './${component.name}';`);\n\n        await runUpdateImportPathsCodemod(newComponentFile);\n      }\n\n      if (component.componentType === 'page') {\n        pagesComponents.push({\n          name: component.name,\n          path: `./components/${component.name}`,\n          url: component.path,\n        });\n      }\n    }\n  }\n\n  if (pagesComponents.length === 0) {\n    console.log('No page components found in plasmic.json.');\n    return;\n  }\n\n  const appTsxPath = path.resolve(templateCwd, 'src/App.tsx');\n  const jscodeshiftOptions = {\n    parser: 'tsx',\n    dry: false,\n  };\n\n  const codemodPath = path.resolve(__dirname, '../codemods/addRoutes.ts');\n  await run(codemodPath, [appTsxPath], { ...jscodeshiftOptions, pagesComponents });\n}\n\nexport async function runUpdateImportPathsCodemod(file: string) {\n  const jscodeshiftOptions = {\n    parser: 'tsx',\n    dry: false,\n  };\n\n  const codemodPath = path.resolve(__dirname, '../codemods/updatePlasmicImportPath.ts');\n  await run(codemodPath, [file], jscodeshiftOptions);\n}\n","import chalk from 'chalk';\nimport path from 'path';\nimport fs from 'fs';\nimport { executeCommand } from '../utils/executeCommand';\nimport { setupComponentFoldersAndRoutes } from './runCodemods';\nimport { promptForProjectId } from '../utils/promptForPlasmicId'\n\nexport async function plasmicSync(projectPath: string) {\n  try {\n    const projectName = path.basename(projectPath);\n\n    // Check if the current directory contains the 'plasmic.json' file\n    const plasmicJsonPath = path.join(projectPath, 'plasmic.json');\n\n    if (!fs.existsSync(plasmicJsonPath)) {\n      console.log(chalk.red('Error: plasmic.json not found in the current directory.'));\n      console.log(chalk.yellow('Cannot sync without a valid plasmic.json file.'));\n      process.exit(1);\n    }\n    console.log(chalk.green(`Found plasmic.json for ${projectName}.`));\n\n    const plasmicConfig = JSON.parse(fs.readFileSync(plasmicJsonPath, 'utf-8'));\n    let projectId = plasmicConfig.projects[0].projectId;\n\n    if (!projectId) {\n      projectId = await promptForProjectId();\n      await executeCommand('plasmic', ['sync', '-p', projectId, '--yes'], projectPath);\n    } else {\n      await executeCommand('plasmic', ['sync', '--yes'], projectPath);\n    }\n\n    console.log(chalk.green(`Plasmic project ${projectName} synced successfully.`));\n\n    console.log(chalk.green(`Updating imports, creating folder structure and formatting code`));\n\n    await setupComponentFoldersAndRoutes(projectPath);\n\n    await executeCommand('npx', ['prettier', '.', '--write'], projectPath);\n\n  } catch (error) {\n    console.error(chalk.red(`Error syncing Plasmic project: ${(error as Error).message}`));\n  } finally {\n    process.exit(1);\n  }\n}\n","import chalk from 'chalk';\nimport { executeCommand } from '../utils/executeCommand';\n\nexport async function plasmicAuth () {\n  try {\n    await executeCommand('plasmic', ['auth'], '');\n\n  } catch (error) {\n    console.error(chalk.red(`Error syncing Plasmic project: ${(error as Error).message}`));\n  } finally {\n    process.exit(1);\n  }\n}\n","import chalk from 'chalk';\nimport path from 'path';\nimport { executeCommand } from '../utils/executeCommand';\n\nexport async function plasmicInit(projectPath: string) {\n  try {\n    await executeCommand('plasmic', ['init', '--src-dir', 'src/generated','--yes'], projectPath);\n\n  } catch (error) {\n    console.error(chalk.red(`Error initialising plasmic: ${(error as Error).message}`));\n  }\n  finally {\n    process.exit(1);\n  }\n}\n","import chalk from 'chalk';\nimport { executeCommand } from '../utils/executeCommand';\n\nexport async function serveCreateReactAppBuild(projectPath: string) {\n  try {\n\n    await executeCommand('serve', ['-s', 'build'], projectPath);\n\n  } catch (error) {\n    console.error(chalk.red(`Error serving project: ${(error as Error).message}`));\n  }\n  finally {\n    process.exit(1);\n  }\n}\n","import chalk from 'chalk';\nimport path from 'path';\nimport fs from 'fs';\nimport { executeCommand } from '../utils/executeCommand';\n\nexport async function plasmicFixImports(projectPath: string) {\n  try {\n    const projectName = path.basename(projectPath);\n\n    // Check if the current directory contains the 'plasmic.json' file\n    const plasmicJsonPath = path.join(projectPath, 'plasmic.json');\n\n    if (!fs.existsSync(plasmicJsonPath)) {\n      console.log(chalk.red('Error: plasmic.json not found in the current directory.'));\n      console.log(chalk.yellow('Cannot sync without a valid plasmic.json file.'));\n      process.exit(1);\n    }\n    console.log(chalk.green(`Found plasmic.json for ${projectName}.`));\n\n    await executeCommand('plasmic', ['fix-imports'], projectPath);\n\n  } catch (error) {\n    console.error(chalk.red(`Error fixing imports: ${(error as Error).message}`));\n  }\n  finally {\n    process.exit(1);\n  }\n}\n","import readline from 'readline';\nimport chalk from 'chalk';\n\nexport const rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n});\n\nexport function promptForProjectName() {\n  return new Promise<string>((resolve, reject) => {\n    rl.question('What do you want to call the project? ', (projectName) => {\n      if (!projectName) {\n        console.error(chalk.red('Project name cannot be empty.'));\n        promptForProjectName().then(resolve).catch(reject); // Prompt again\n      } else {\n        rl.close();\n        resolve(projectName.trim());\n      }\n    });\n  });\n}","import fs from 'fs';\nimport path from 'path';\nimport dotenv from 'dotenv';\nimport axios from 'axios';\n\nfunction getBackendUrl(templateCwd: string) {\n    const envPath = path.join(templateCwd, '.env');\n\n    if (fs.existsSync(envPath)) {\n        const envConfig = dotenv.parse(fs.readFileSync(envPath));\n        console.log(envConfig)\n        return envConfig.VITE_BACKEND_URL || 'http://localhost:3001';\n    }\n\n    // Fallback to default if .env or the variable isn't present\n    return 'http://localhost:3001';\n}\n\nfunction capitalize(str: string) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n// Example usage in generateSDK function:\nexport async function generateSDK(templateCwd: string) {\n    const API_BASE_URL = getBackendUrl(templateCwd);\n    const ENTITY_API_URL = `${API_BASE_URL}/sdk/entities`;\n\n    const SDK_DIR = path.join(templateCwd, 'src', 'generated', 'sdk');\n\n    try {\n        const response = await axios.get(ENTITY_API_URL);\n        const entities = response.data;\n\n        // Ensure the SDK directory exists\n        if (!fs.existsSync(SDK_DIR)) {\n            fs.mkdirSync(SDK_DIR, { recursive: true });\n        }\n\n        // @ts-ignore\n        entities.forEach(entity => {\n            const { name, endpoints } = entity;\n            const className = capitalize(name);\n            const filePath = path.join(SDK_DIR, `${className.toLowerCase()}.ts`);\n            const fileContent = `\nimport axios, { AxiosResponse } from 'axios';\n\nconst API_BASE_URL = import.meta.env.VITE_BACKEND_URL || '${API_BASE_URL}';\n\n/**\n* Fetches all ${className}s.\n* \n* @returns {Promise<AxiosResponse<${className}[]>>} A promise that resolves to an array of ${className} objects.\n*/\nexport const getAll${className}s = async (): Promise<AxiosResponse<${className}[]>> => {\n return axios.get(\\`\\${API_BASE_URL}${endpoints.getAll}\\`);\n};\n\n/**\n* Fetches a single ${className} by ID.\n* \n* @param {string | number} id - The ID of the ${className} to fetch.\n* @returns {Promise<AxiosResponse<${className}>>} A promise that resolves to the ${className} object.\n*/\nexport const get${className} = async (id: string | number): Promise<AxiosResponse<${className}>> => {\n return axios.get(\\`\\${API_BASE_URL}${endpoints.getOne.replace(':id', '\\${id}')}\\`);\n};\n\n/**\n* Creates a new ${className}.\n* \n* @param {Partial<${className}>} data - The data to create the ${className}.\n* @returns {Promise<AxiosResponse<${className}>>} A promise that resolves to the created ${className} object.\n*/\nexport const create${className} = async (data: Partial<${className}>): Promise<AxiosResponse<${className}>> => {\n return axios.post(\\`\\${API_BASE_URL}${endpoints.create}\\`, data);\n};\n\n/**\n* Updates an existing ${className}.\n* \n* @param {string | number} id - The ID of the ${className} to update.\n* @param {Partial<${className}>} data - The data to update the ${className}.\n* @returns {Promise<AxiosResponse<${className}>>} A promise that resolves to the updated ${className} object.\n*/\nexport const update${className} = async (id: string | number, data: Partial<${className}>): Promise<AxiosResponse<${className}>> => {\n return axios.put(\\`\\${API_BASE_URL}${endpoints.update.replace(':id', '\\${id}')}\\`, data);\n};\n\n/**\n* Deletes an existing ${className}.\n* \n* @param {string | number} id - The ID of the ${className} to delete.\n* @returns {Promise<AxiosResponse<void>>} A promise that resolves when the ${className} is deleted.\n*/\nexport const delete${className} = async (id: string | number): Promise<AxiosResponse<void>> => {\n return axios.delete(\\`\\${API_BASE_URL}${endpoints.delete.replace(':id', '\\${id}')}\\`);\n};\n\n// Interface representing the ${className} entity\nexport interface ${className} {\n id: string | number;\n // Add other fields that are part of the ${className} entity here\n}\n`;\n\n            fs.writeFileSync(filePath, fileContent);\n            console.log(`Generated TypeScript SDK for entity: ${name}`);\n        });\n\n        console.log('TypeScript SDK generation complete.');\n    } catch (error) {\n        console.error('Error generating TypeScript SDK:', error);\n    }\n    finally {\n        process.exit(1);\n      }\n}\n","import chalk from 'chalk';\nimport { executeCommand } from '../utils/executeCommand';\n\nexport async function stashAndPull(projectPath: string) {\n  try {\n    await executeCommand('git', ['stash'], projectPath);\n    await executeCommand('git', ['pull'], projectPath);\n    await executeCommand('git', ['stash', 'apply', 'stash@{0}'], projectPath);\n\n  } catch (error) {\n    console.error(chalk.red(`Error syncing Plasmic project: ${(error as Error).message}`));\n  } finally {\n    process.exit(1);\n  }\n}\n"],"mappings":"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","names":["chalk","dotenv","command","args","projectDir","chalk","rl","path","fs","templateCwd","fs","path","projectDir","chalk","chalk","path","fs","path","fs","chalk","chalk","chalk","chalk","chalk","chalk","chalk","chalk","path","fs","path","fs","chalk","readline","chalk","fs","path","templateCwd","chalk","chalk","dotenv","chalk"]}